Use cWebObject.pkg

Define CM_MEDIATION_SILENT for "silent"
Define CM_MEDIATION_OPTIONAL for "optional"
Define CM_MEDIATION_REQUIRED for "required"

Struct tFederatedCredentialRequestOptions
    String[] providers
    String[] protocols
End_Struct

Struct tCredentialRequestOptions
    Boolean password
    tFederatedCredentialRequestOptions federated
    String mediation // CM_MEDIATION_*
End_Struct

Struct tCredential
    String id
    String type // Valid values are "password", "federated" and "public-key".
    String iconURL
    String name
    
    // If type = password
    String password
    
    // If type = federated
    String provider
    String protocol
End_Struct

Class cCredentialManagementAPI is a cWebObject
    
    Procedure Construct_Object
        Forward Send Construct_Object

        { WebProperty=Client DesignTime=False }
        Property Boolean pbIsSupported False

        { WebProperty=Client }
        Property Boolean pbServerOnCredential False
        { WebProperty=Client }
        Property String psClientOnCredential ""
        { WebProperty=Client }
        Property Boolean pbServerOnSuccess False
        { WebProperty=Client }
        Property String psClientOnSuccess ""
        { WebProperty=Client }
        Property Boolean pbServerOnError False
        { WebProperty=Client }
        Property String psClientOnError ""

        Set psJSClass to "WebAPIs.CredentialManagement"
    End_Procedure

    Procedure End_Construct_Object
        Forward Send End_Construct_Object

        WebPublishProcedure OnCredentialProxy
        WebPublishProcedure OnSuccess
        WebPublishProcedure OnError
    End_Procedure
    
    Procedure GetCredential tCredentialRequestOptions stOptions
        String[] aNothing
        Send ClientAction "getCredential" aNothing stOptions
    End_Procedure
    
    Procedure StorePassword String sID String sName String sIconURL String sPassword
        String[] aParams
        Move sID to aParams[0]
        Move sName to aParams[1]
        Move sIconURL to aParams[2]
        Move sPassword to aParams[3]
        Send ClientAction "storePassword" aParams
    End_Procedure
    
    Procedure StoreFederated String sID String sName String sIconURL String sProvider String sProtocol
        String[] aParams
        Move sID to aParams[0]
        Move sName to aParams[1]
        Move sIconURL to aParams[2]
        Move sProvider to aParams[3]
        Move sProtocol to aParams[4]
        Send ClientAction "storeFederated" aParams
    End_Procedure
    
    Procedure PreventSilentAccess
        Send ClientAction "preventSilentAccess"
    End_Procedure

    { Visibility=Private }
    Procedure OnCredentialProxy
        Handle hoJson
        tCredential aData
        Get phoActionJsonData to hoJson
        Set pbRequireAllMembers of hoJson to False
        Get JsonToDataType of hoJson to aData
        Send OnCredential aData
    End_Procedure
    
    { MethodType=Event }
    Procedure OnCredential tCredential stCredential
    End_Procedure
    
    { MethodType=Event }
    Procedure OnSuccess
    End_Procedure
    
    { MethodType=Event }
    Procedure OnError String sErrorName String sErrorMessage
    End_Procedure

End_Class